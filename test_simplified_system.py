#!/usr/bin/env python3
"""
Test the Simplified SMS ‚Üí LLM ‚Üí MCP Google Calendar System

This test verifies the clean architecture works end-to-end.
"""
import os
import sys
import asyncio
import logging
from datetime import datetime

# Add the project root to Python path
sys.path.insert(0, '/Users/harit/AI Projects/smart-meeting-orchestrator')

from simple_sms_orchestrator import SimpleSMSOrchestrator
from mcp_integration.real_mcp_calendar_client import RealMCPCalendarClient
from sms_coordinator.surge_client import SurgeSMSClient

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

async def test_simplified_system():
    """Test the simplified SMS orchestrator"""
    
    print("üß™ Testing Simplified SMS ‚Üí LLM ‚Üí MCP Google Calendar System")
    print("=" * 60)
    
    # Initialize clients
    mcp_client = RealMCPCalendarClient()
    sms_client = SurgeSMSClient(
        api_key=os.getenv("SURGE_SMS_API_KEY") or "",
        account_id=os.getenv("SURGE_ACCOUNT_ID") or ""
    )
    
    # Initialize orchestrator
    orchestrator = SimpleSMSOrchestrator(mcp_client, sms_client)
    
    print("üîç System Status:")
    print(f"  ‚Ä¢ MCP Client: {'‚úÖ Enabled' if mcp_client.mcp_enabled else '‚ùå Using fallback'}")
    print(f"  ‚Ä¢ LLM: {'‚úÖ Enabled' if orchestrator.llm_enabled else '‚ùå Disabled (need ANTHROPIC_API_KEY)'}")
    print(f"  ‚Ä¢ SMS Client: {'‚úÖ Configured' if sms_client.api_key else '‚ùå Not configured'}")
    print(f"  ‚Ä¢ Available Tools: {len(orchestrator.mcp_tools)}")
    print()
    
    # Test cases
    test_messages = [
        "create a meeting for tomorrow at 11am subject 'plan'",
        "list my meetings this week", 
        "what's on my calendar today?",
        "schedule family dinner tomorrow at 7pm",
        "find free time for a 1 hour meeting"
    ]
    
    print("üß™ Testing SMS Message Processing:")
    print("-" * 40)
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n{i}. Testing: '{message}'")
        
        try:
            # Simulate processing SMS (without actual database)
            if orchestrator.llm_enabled:
                response = await orchestrator.process_sms(
                    message=message,
                    user_phone="+1234567890",
                    user_name="Test User",
                    db=None  # Mock database for testing
                )
                print(f"   ‚úÖ Response: {response}")
            else:
                print(f"   ‚ö†Ô∏è LLM disabled - would return: 'Sorry, I need LLM access to help with calendar operations.'")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ SIMPLIFICATION SUMMARY:")
    print("‚úÖ Single SMS webhook endpoint (/webhook/sms)")
    print("‚úÖ Single orchestrator class (SimpleSMSOrchestrator)")  
    print("‚úÖ Direct MCP Google Calendar integration")
    print("‚úÖ LLM tool selection with Claude")
    print("‚úÖ No complex fallback chains or layers")
    print("‚úÖ Clean SMS ‚Üí LLM ‚Üí MCP ‚Üí Response flow")
    
    if orchestrator.llm_enabled:
        print("\nüöÄ READY FOR PRODUCTION:")
        print("‚Ä¢ Set RAILWAY_MCP_ENDPOINT for your 8 MCP tools")
        print("‚Ä¢ Configure SMS webhook URL in Surge")
        print("‚Ä¢ Send SMS: 'Schedule meeting tomorrow at 11am subject plan'")
        print("‚Ä¢ LLM will call create_calendar_event MCP tool")
        print("‚Ä¢ Real Google Calendar event will be created!")
    else:
        print("\nüîß TO ENABLE FULL FUNCTIONALITY:")
        print("‚Ä¢ Set ANTHROPIC_API_KEY environment variable")
        print("‚Ä¢ Set RAILWAY_MCP_ENDPOINT for your 8 MCP tools") 
        print("‚Ä¢ Configure Surge SMS credentials")

if __name__ == "__main__":
    asyncio.run(test_simplified_system())
